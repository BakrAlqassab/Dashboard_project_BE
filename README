# Dashboard Backend API

![Dashboard API](path_to_your_image.png) <!-- You need to replace "path_to_your_image.png" with the actual path to your image -->

## Overview

This project provides the backend for a dashboard application that allows users to create, read, update, and delete charts. The backend is built using **Node.js**, **Express.js**, and **MongoDB**. It uses **JWT** (JSON Web Tokens) for user authentication and **Mongoose** as the ODM (Object Data Modeling) library to interact with MongoDB.

## Key Techniques and Libraries

### 1. **Node.js**
   - A JavaScript runtime built on Chrome's V8 JavaScript engine.
   - Provides an event-driven, non-blocking I/O model, which makes it efficient and lightweight.
  
### 2. **Express.js**
   - A fast, unopinionated, minimalist web framework for Node.js.
   - Handles HTTP requests, middleware, and routing.

### 3. **MongoDB**
   - A NoSQL database that uses a flexible, JSON-like document structure.
   - MongoDB Atlas is used as the cloud-hosted database service.

### 4. **Mongoose**
   - An ODM library for MongoDB and Node.js.
   - Simplifies data modeling, schema definition, and data validation.

### 5. **JWT (JSON Web Tokens)**
   - A compact, URL-safe means of representing claims to be transferred between two parties.
   - Used for authentication in our application to ensure secure communication.

### 6. **bcryptjs**
   - A library to hash and compare passwords securely.
   - Ensures that stored passwords are encrypted, adding a layer of security.

### 7. **dotenv**
   - A module that loads environment variables from a `.env` file into `process.env`.
   - Used to manage sensitive configuration data, like database credentials and JWT secrets.

## Project Structure




### Explanation

- **Project Overview**: A brief description of the project, including its purpose and technologies used.
- **Key Techniques and Libraries**: Detailed explanations of the key libraries and technologies used in the project.
- **Project Structure**: An overview of the directory structure of the project, with explanations of key files.
- **Getting Started**: Step-by-step instructions for setting up and running the project locally.
- **API Endpoints**: Documentation of the available API endpoints, including example requests and responses.
- **Error Handling**: Information on how errors are handled in the API.
- **Adding Images**: Instructions on how to add images to the `README.md`.

This `README.md` provides a comprehensive overview of your project, including technical details, setup instructions, and usage examples. It's a great resource for other developers who might work on the project or users who need to set it up.
